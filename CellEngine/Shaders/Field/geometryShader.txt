//CELL
#version 330 core

layout(points) in;
layout(triangle_strip, max_vertices = 4) out;

uniform vec2 cameraPosition;
uniform float cameraScale;
in vec4[] Color;
in float[] TextureLayer;

out vec4 originalColor;
out vec3 textureCoord;

void main()
{
	originalColor = Color[0];
	float textureLayer = TextureLayer[0];
	
	vec4 pos = gl_in[0].gl_Position;
	float scale = 2 / cameraScale;
	
	//Moving
	float xPosL = scale * (pos.x - 20 * (cameraPosition.x + 0.5));
	float yPosL = scale * (pos.y - 20 * (cameraPosition.y + 0.5));
	float xPosH = scale * ((pos.x + 1) - 20 * (cameraPosition.x + 0.5));
	float yPosH = scale * ((pos.y + 1) - 20 * (cameraPosition.y + 0.5));
	
	//Vertices
	textureCoord = vec3(0, 1, textureLayer);
	gl_Position = vec4(xPosL, yPosL, 1, 1);
	EmitVertex();

	textureCoord = vec3(0, 0, textureLayer);
	gl_Position = vec4(xPosL, yPosH, 1, 1);
	EmitVertex();

	textureCoord = vec3(1, 1, textureLayer);
	gl_Position = vec4(xPosH, yPosL, 1, 1);
	EmitVertex();
	
	//originalColor  = originalColor + vec4(0.2, 0.2, 0.2, 0);
	textureCoord = vec3(1, 0, textureLayer);
	gl_Position = vec4(xPosH, yPosH, 1, 1);
	EmitVertex();

	EndPrimitive();
}